#ifdef VS 
 
precision highp float;
attribute vec3 position;
attribute vec3 normal;
uniform mat3 normalMatrix;
uniform mat4 modelViewMatrix;
uniform mat4 projectionMatrix;
varying vec3 fNormal;
varying vec3 fPosition;

void main()
{
  fNormal = normalize(normalMatrix * normal);
  vec4 pos = modelViewMatrix * vec4(position, 1.0);
  fPosition = pos.xyz;
  gl_Position = projectionMatrix * pos;
}
 
#else 
 
precision highp float;
uniform float time;
uniform vec2 resolution;
varying vec3 fPosition;
varying vec3 fNormal;

const vec3 light_color1 = vec3(1.2, 1.0, 1.0);//light for diffusion
const vec3 light_color2 = vec3(1.0,1.0,1.0);//light for specular
const vec3 light_dir = vec3(1.0, 1.0, 0.0);//light direction of diffusion
const vec3 object_color = vec3(0.6, 0.0, 1.0);//color of the object

const float Ka = 0.4;
const float Ks = 2.0;
const float sExp = 40.0;

void main()
{
  
  float theta = time*30.0;
  vec3 dir1 = vec3(cos(theta),0.0,sin(theta)); 
  
  vec3 l = normalize(dir1);
  vec3 l2 = normalize(light_dir);
  vec3 n = normalize(fNormal);
  vec3 e = normalize(-fPosition);
  vec3 h = normalize(e+l);
  
  vec3 ambientColor  = Ka*object_color;
  vec3 diffuseColor  = light_color1*dot(l2,n);
  vec3 specularColor = Ks*light_color2*pow(max(dot(h,n),0.0),sExp);
  
  
  gl_FragColor = vec4(diffuseColor+ambientColor+specularColor, 2.0);
  
  
}
 
#endif